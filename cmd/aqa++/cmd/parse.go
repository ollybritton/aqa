package cmd

import (
	"fmt"
	"io"
	"math/rand"
	"os"
	"os/exec"
	"path"

	"github.com/bradleyjkemp/memviz"

	"github.com/chzyer/readline"
	au "github.com/logrusorgru/aurora"
	"github.com/ollybritton/aqa++/lexer"
	"github.com/ollybritton/aqa++/parser"
	"github.com/spf13/cobra"
)

// parseCmd represents the parse command
var parseCmd = &cobra.Command{
	Use:   "parse",
	Short: "parse parses the input specified into an AST.",
	Long: `parse parses the input specified into an AST.
This tool can then be used to view the tree as text or as a graph using Graphviz, if installed`,
	Run: func(cmd *cobra.Command, args []string) {

		l, err := readline.NewEx(&readline.Config{
			Prompt:            "\033[31mÂ»\033[0m ",
			HistoryFile:       "/tmp/aqa-parse.hist.tmp",
			InterruptPrompt:   "^C",
			EOFPrompt:         "exit",
			HistorySearchFold: true,
		})

		source, _ := cmd.Flags().GetBool("source")
		graph, _ := cmd.Flags().GetBool("graph")

		if err != nil {
			fmt.Println(
				"error:", au.Red(err),
			)
		}
		defer l.Close()

		for {
			line, err := l.Readline()
			if err == readline.ErrInterrupt {
				if len(line) == 0 {
					break
				} else {
					continue
				}
			} else if err == io.EOF {
				break
			}

			parse(line, source, graph)
		}

	},
}

func checkErrors(p *parser.Parser) bool {
	var did bool

	for _, e := range p.Errors() {
		did = true
		errorType := au.Red(au.Bold(fmt.Sprintf("%T", e)))
		fmt.Printf("%v: %v\n", errorType, au.Green(e.Error()))
	}

	fmt.Println("")
	return did
}

func parse(input string, source, graph bool) {
	l := lexer.New(input)
	p := parser.New(l)

	program := p.Parse()
	checkErrors(p)

	if source {
		fmt.Println(program)
	}

	fmt.Println("")

	if graph {
		random := rand.Intn(100000)
		graphfile := path.Join("/tmp", fmt.Sprintf("graph-%d.dot", random))
		outputfile := path.Join("/tmp", fmt.Sprintf("graph-%d.png", random))

		file, err := os.Create(graphfile)
		if err != nil {
			fmt.Println(au.Red(au.Bold("Could not open graph file:")))
			fmt.Println(au.Red(err))
			os.Exit(1)
		}

		memviz.Map(file, program)

		cmd := exec.Command("dot", "-Tps", graphfile, "-o", outputfile)
		err = cmd.Run()
		if err != nil {
			fmt.Println(au.Red(au.Bold("Could not run dot tool on graph:")))
			fmt.Println(au.Red(err))
			os.Exit(1)
		}

		err = exec.Command("open", outputfile).Run()
		if err != nil {
			fmt.Println(au.Red(au.Bold("Could not open output file " + outputfile + ":")))
			fmt.Println(au.Red(err))
			os.Exit(1)
		}

	}

}

func init() {
	replCmd.AddCommand(parseCmd)

	parseCmd.Flags().BoolP("source", "s", true, "print the parsed source code")
	parseCmd.Flags().BoolP("graph", "g", false, "output the AST as a graph, generated by graphviz")
}
